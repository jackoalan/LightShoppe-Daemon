There are 10 data structures in LSD.
During runtime, these structures are organised into
carefully-managed linked arrays whose elements are indexed
into a series of sqlite tables.

Allocation: Unless otherwise stated, REALLOC IS TO BE AVOIDED
LIKE THE PLAGUE! LSD uses a combination of arrays, linked lists,
and garbage-collection style marking and sweeping to keep
data members organised. Realloc undermines this by 
changing the addresses of established objects in memory.
Rather, arrays are implemented in a subsystem where each array is
represented by a data structure provided by a subsystem constructor
function and elements are *never* copied around at runtime with this
hybrid ADT.

Parameters: an array has two parameters provided by the user at init. 
The first parameter is called the multiple parameter. It allows
the user to define the maximum number of elements per array unit.
The second parameter is an integer indicating the size (in bytes)
of a single element structure (sizeof may be used to accomplish this).

Array Unit: the array unit is an actual array of the struture being 
contained. As stated before, its size is the value of multiple * element size.

ArrayHead Struct:
int mul;
short elemDel; // Boolean indicating if elements may be removed by marksweep
int capacity;
int numUnits;
int elemSize;
int numElems;
struct LSD_ArrayUnit* firstUnit;

ArrayUnit Struct:
struct LSD_ArrayHead* parent;
int unitNum;
struct LSD_ArrayUnit* nextUnit;
void* array;

Array Functions:
int makeArray(struct LSD_ArrayHead* target, int arrMul, size_t elemSize, short elemDel);
int clearArray(struct LSD_ArrayHead* toclear);
int pickIdx(struct LSD_ArrayHead* array, void** targetPtrBind, int idx);
int delIdx(struct LSD_ArrayHead* array, int idx);
int insertElem(struct LSD_ArrayHead* array, int* targetIdxBind, void** targetPtrBind);

Private Support Functions:
int recursiveClear(struct LSD_ArrayUnit* unit);
int recursiveResolve(struct LSD_ArrayUnit* curUnit, int targetUnitNum, 
                     struct LSD_ArrayUnit** targetPtrBind);

DBStmtArr
-single: yes
-location: static member of "DBOps.c"
-insertions: 

NodeInstArr
-single: yes
-location: static member of "Node.c"
-insertions: checked against marksweep table for open slots (and removes it from table when found), 
             otherwise uses array size for insertion index
-deletions: removes corresponding table record, adds marksweep record to table
-

NodeClassArr
-single: yes
-location: static member of "Node.c"

NodeInputArr
-single: yes
-location: static member of "Node.c"

NodeOutputArr
-single: yes
-location: static member of "Node.c"

DataTypeArr
-single: yes
-location: static member of "Node.c"

pluginArr
-single: yes
-location: static member of "Plugin.c"

partitionArr
-single: yes
-location: static member of "Partition.c"

univArr
-single: yes
-location: static member of "Channel.c"

channelArr
-single: yes
-location: static member of "Channel.c"